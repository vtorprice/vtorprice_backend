"""
Django settings for vtorprice project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
from datetime import timedelta

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DJANGO_ENV = os.getenv("DJANGO_ENV", "Development")
DEBUG = DJANGO_ENV != "Production"

ALLOWED_HOSTS = os.environ["DJANGO_ALLOWED_HOSTS"].split(",")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "api/static/"
STATIC_ROOT = os.path.join(PROJECT_DIR, "static/")

MEDIA_URL = "api/media/"
MEDIA_ROOT = os.path.join(PROJECT_DIR, "media/")

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "django_admin_multiple_choice_list_filter",
    "django_mptt_admin",
    "admin_auto_filters",
    "phonenumber_field",
    "rest_framework",
    "django_filters",
    "corsheaders",
    "drf_yasg",
    "mptt",
    "import_export",
    "colorfield",
    # Local apps
    "user",
    "chat",
    "company",
    "product",
    "exchange",
    "statistic",
    "logistics",
    "notification",
    "finance",
    "document_generator",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = (
    "common.auth.AuthModelBackend",
    "common.auth.BaseModelBackend",
)

AUTH_USER_MODEL = "user.User"

CORS_ORIGIN_ALLOW_ALL = True

CSRF_COOKIE_SECURE = False

CSRF_TRUSTED_ORIGINS = [
    "http://188.68.217.106",
    "http://188.68.217.106:8040",
    "https://vtorprice.ru",
]

ROOT_URLCONF = "config.urls"

if not DEBUG:
    print("   DEBUG: False")

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": os.environ.get(
                "REDIS_URL", "redis://127.0.0.1:6379/2"
            ),
            "KEY_PREFIX": "default",
            "TIMEOUT": 300,
            "IGNORE_EXCEPTIONS": True,
            "VERSION": 1,
            "OPTIONS": {
                "PASSWORD": os.environ.get("REDIS_PASSWORD"),
                "SERIALIZER": "django_redis.serializers.pickle.PickleSerializer",
                "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            },
        },
    }

else:
    print("   DEBUG: True")

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        },
    }

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DB_ENGINE = os.environ["DB_ENGINE"]

if DB_ENGINE == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ["DB_NAME"],
            "USER": os.environ["DB_USER"],
            "PASSWORD": os.environ["DB_PASSWORD"],
            "HOST": os.environ["DB_HOST"],
            "PORT": os.environ["DB_PORT"],
            "CONN_MAX_AGE": 30,
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR + "/db.sqlite3",
        }
    }

# Rest framework
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    "DEFAULT_PAGINATION_CLASS": "common.pagination.PageSizePagination",
    "PAGE_SIZE": 10,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "COERCE_DECIMAL_TO_STRING": False,
    "STRICT_JSON": False,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "AUTH_HEADER_TYPES": ("JWT",),
}

# Swagger drf-yasg
# https://drf-yasg.readthedocs.io/en/stable/settings.html

SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "description": "JWT authentication. Put 'JWT <YOUR_TOKEN>' in the field bellow. NOTE: You need to "
            "manually add 'JWT' prefix in front of your token since current version does not support "
            "automated JWT login",
            "in": "header",
        }
    },
    "DEFAULT_AUTO_SCHEMA_CLASS": "common.swagger.BaseAutoSchema",
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = "UTC"

USE_I18N = True

# DATE_FORMAT = "%m-%d-%Y"
# DATETIME_FORMAT = "%m-%d-%Y %H:%M:%S.%f"
# DATE_INPUT_FORMATS = "%d-%m-%Y"
USE_L10N = False

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django phone number field
# https://github.com/stefanfoulis/django-phonenumber-field
PHONENUMBER_DEFAULT_REGION = "RU"

# Dadata - information on clients and counterparties
# https://dadata.ru/api/
DADATA_API_KEY = os.getenv(
    "DADATA_API_KEY", "88b029963c84b30d8e50cce3774b912e5c929a21"
)

# Yandex geocoder - used for retrieving many addresses when searching by it

YANDEX_GEOCODER_API_KEY = os.getenv(
    "YANDEX_GEOCODER_API_KEY", "a9115912-0552-45a7-a018-ce75622e0046"
)
YANDEX_GEOCODER_BASE_URL = "https://geocode-maps.yandex.ru"

# Channels
# https://channels.readthedocs.io/
if DEBUG:
    CHANNEL_LAYERS = {
        "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}
    }
else:
    CHANNEL_REDIS_URL = os.getenv("CHANNEL_REDIS_URL", "redis")
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [(CHANNEL_REDIS_URL, 6379)],
            },
        },
    }

# Value of NDS tax
NDS_VALUE = os.getenv("NDS_VALUE", 20)

# Approximate price per KM for logistics
PRICE_PER_KM = float(os.getenv("PRICE_PER_KM", 30))

# Max total weight for "READY FOR SHIPMENT" application
READY_FOR_SHIPMENT_MAX_TOTAL_WEIGHT = os.getenv(
    "READY_FOR_SHIPMENT_MAX_TOTAL_WEIGHT", 24000.00
)  # kg

# Using because when we have two instances on same server we need to have different ports
BASE_URL = os.getenv("BASE_URL", "http://localhost:8000")

# Debug Toolbar settings
if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
    # In order to see debug toolbar while developing we should add our IP address to INTERNAL_IPS
    INTERNAL_IPS = ["127.0.0.1"]
